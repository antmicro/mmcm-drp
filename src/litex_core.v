//--------------------------------------------------------------------------------
// Auto-generated by Migen (--------) & LiteX (54598ed2) on 2020-06-30 14:31:03
//--------------------------------------------------------------------------------
module top(
	input wire sys_clk,
	input wire sys_rst,
	input wire clkgen_ref,
	output wire clkgen_out0,
	output wire clkgen_out1,
	output wire clkgen_locked,
	input wire axi_awvalid,
	output wire axi_awready,
	input wire [31:0] axi_awaddr,
	input wire axi_wvalid,
	output wire axi_wready,
	input wire [31:0] axi_wdata,
	input wire [3:0] axi_wstrb,
	output wire axi_bvalid,
	input wire axi_bready,
	output wire [1:0] axi_bresp,
	input wire axi_arvalid,
	output wire axi_arready,
	input wire [31:0] axi_araddr,
	output wire axi_rvalid,
	input wire axi_rready,
	output wire [1:0] axi_rresp,
	output wire [31:0] axi_rdata
);

wire sys_clk_1;
wire sys_rst_1;
wire por_clk;
reg main_int_rst = 1'd1;
reg [13:0] main_adr = 14'd0;
reg main_we = 1'd0;
wire [31:0] main_dat_w;
wire [31:0] main_dat_r;
wire [29:0] main_wishbone_adr;
wire [31:0] main_wishbone_dat_w;
wire [31:0] main_wishbone_dat_r;
wire [3:0] main_wishbone_sel;
wire main_wishbone_cyc;
wire main_wishbone_stb;
reg main_wishbone_ack = 1'd0;
wire main_wishbone_we;
wire [2:0] main_wishbone_cti;
wire [1:0] main_wishbone_bte;
reg main_wishbone_err = 1'd0;
wire out0_clk;
wire out1_clk;
reg main_reset = 1'd0;
wire main_locked;
wire main_drp_reset_re;
wire main_drp_reset_r;
wire main_drp_reset_we;
reg main_drp_reset_w = 1'd0;
wire main_drp_locked_status;
wire main_drp_locked_we;
wire main_drp_read_re;
wire main_drp_read_r;
wire main_drp_read_we;
reg main_drp_read_w = 1'd0;
wire main_drp_write_re;
wire main_drp_write_r;
wire main_drp_write_we;
reg main_drp_write_w = 1'd0;
reg main_drp_drdy_status = 1'd0;
wire main_drp_drdy_we;
reg [6:0] main_drp_adr_storage = 7'd0;
reg main_drp_adr_re = 1'd0;
reg [15:0] main_drp_dat_w_storage = 16'd0;
reg main_drp_dat_w_re = 1'd0;
wire [15:0] main_drp_dat_r_status;
wire main_drp_dat_r_we;
reg main_den_pipe = 1'd0;
reg main_dwe_pipe = 1'd0;
wire main_drp_drdy;
wire main_clkin;
wire main_clkout0;
wire main_clkout_buf0;
wire main_clkout1;
wire main_clkout_buf1;
wire main_aw_valid;
reg main_aw_ready = 1'd0;
wire [31:0] main_aw_payload_addr;
wire main_w_valid;
reg main_w_ready = 1'd0;
wire [31:0] main_w_payload_data;
wire [3:0] main_w_payload_strb;
reg main_b_valid = 1'd0;
wire main_b_ready;
reg [1:0] main_b_payload_resp = 2'd0;
wire main_ar_valid;
reg main_ar_ready = 1'd0;
wire [31:0] main_ar_payload_addr;
reg main_r_valid = 1'd0;
wire main_r_ready;
reg [1:0] main_r_payload_resp = 2'd0;
reg [31:0] main_r_payload_data = 32'd0;
reg [29:0] main_wb_bus_adr = 30'd0;
reg [31:0] main_wb_bus_dat_w = 32'd0;
wire [31:0] main_wb_bus_dat_r;
reg [3:0] main_wb_bus_sel = 4'd0;
reg main_wb_bus_cyc = 1'd0;
reg main_wb_bus_stb = 1'd0;
wire main_wb_bus_ack;
reg main_wb_bus_we = 1'd0;
reg [2:0] main_wb_bus_cti = 3'd0;
reg [1:0] main_wb_bus_bte = 2'd0;
wire main_wb_bus_err;
reg [31:0] main_data = 32'd0;
wire [31:0] main_r_addr;
wire [31:0] main_w_addr;
reg main_last_ar_aw_n = 1'd0;
reg builder_wishbone2csr_state = 1'd0;
reg builder_wishbone2csr_next_state = 1'd0;
wire builder_mmcm_fb;
reg [2:0] builder_axilite2wishbone_state = 3'd0;
reg [2:0] builder_axilite2wishbone_next_state = 3'd0;
reg main_last_ar_aw_n_next_value0 = 1'd0;
reg main_last_ar_aw_n_next_value_ce0 = 1'd0;
reg [31:0] main_data_next_value1 = 32'd0;
reg main_data_next_value_ce1 = 1'd0;
wire [13:0] builder_bank_bus_adr;
wire builder_bank_bus_we;
wire [31:0] builder_bank_bus_dat_w;
reg [31:0] builder_bank_bus_dat_r = 32'd0;
wire builder_drp_locked_re;
wire builder_drp_locked_r;
wire builder_drp_locked_we;
wire builder_drp_locked_w;
wire builder_drp_drdy_re;
wire builder_drp_drdy_r;
wire builder_drp_drdy_we;
wire builder_drp_drdy_w;
wire builder_drp_adr0_re;
wire [6:0] builder_drp_adr0_r;
wire builder_drp_adr0_we;
wire [6:0] builder_drp_adr0_w;
wire builder_drp_dat_w0_re;
wire [15:0] builder_drp_dat_w0_r;
wire builder_drp_dat_w0_we;
wire [15:0] builder_drp_dat_w0_w;
wire builder_drp_dat_r_re;
wire [15:0] builder_drp_dat_r_r;
wire builder_drp_dat_r_we;
wire [15:0] builder_drp_dat_r_w;
wire builder_sel;
wire [13:0] builder_adr;
wire builder_we;
wire [31:0] builder_dat_w;
wire [31:0] builder_dat_r;

assign clkgen_out0 = out0_clk;
assign clkgen_out1 = out1_clk;
assign clkgen_locked = main_locked;
assign main_aw_valid = axi_awvalid;
assign main_aw_payload_addr = axi_awaddr;
assign axi_awready = main_aw_ready;
assign main_w_valid = axi_wvalid;
assign main_w_payload_data = axi_wdata;
assign main_w_payload_strb = axi_wstrb;
assign axi_wready = main_w_ready;
assign axi_bvalid = main_b_valid;
assign axi_bresp = main_b_payload_resp;
assign main_b_ready = axi_bready;
assign main_ar_valid = axi_arvalid;
assign main_ar_payload_addr = axi_araddr;
assign axi_arready = main_ar_ready;
assign axi_rvalid = main_r_valid;
assign axi_rresp = main_r_payload_resp;
assign axi_rdata = main_r_payload_data;
assign main_r_ready = axi_rready;
assign sys_clk_1 = sys_clk;
assign por_clk = sys_clk;
assign sys_rst_1 = main_int_rst;
assign main_dat_w = main_wishbone_dat_w;
assign main_wishbone_dat_r = main_dat_r;
always @(*) begin
	main_adr <= 14'd0;
	main_we <= 1'd0;
	main_wishbone_ack <= 1'd0;
	builder_wishbone2csr_next_state <= 1'd0;
	builder_wishbone2csr_next_state <= builder_wishbone2csr_state;
	case (builder_wishbone2csr_state)
		1'd1: begin
			main_wishbone_ack <= 1'd1;
			builder_wishbone2csr_next_state <= 1'd0;
		end
		default: begin
			if ((main_wishbone_cyc & main_wishbone_stb)) begin
				main_adr <= main_wishbone_adr;
				main_we <= (main_wishbone_we & (main_wishbone_sel != 1'd0));
				builder_wishbone2csr_next_state <= 1'd1;
			end
		end
	endcase
end
assign main_drp_locked_status = main_locked;
assign main_clkin = clkgen_ref;
assign out0_clk = main_clkout_buf0;
assign out1_clk = main_clkout_buf1;
assign main_r_addr = (main_ar_payload_addr - 1'd0);
assign main_w_addr = (main_aw_payload_addr - 1'd0);
always @(*) begin
	main_r_payload_resp <= 2'd0;
	main_r_payload_data <= 32'd0;
	main_data_next_value1 <= 32'd0;
	main_wb_bus_adr <= 30'd0;
	main_data_next_value_ce1 <= 1'd0;
	main_wb_bus_dat_w <= 32'd0;
	main_wb_bus_sel <= 4'd0;
	main_wb_bus_cyc <= 1'd0;
	main_wb_bus_stb <= 1'd0;
	main_aw_ready <= 1'd0;
	main_wb_bus_we <= 1'd0;
	main_w_ready <= 1'd0;
	main_b_valid <= 1'd0;
	main_b_payload_resp <= 2'd0;
	builder_axilite2wishbone_next_state <= 3'd0;
	main_ar_ready <= 1'd0;
	main_last_ar_aw_n_next_value0 <= 1'd0;
	main_last_ar_aw_n_next_value_ce0 <= 1'd0;
	main_r_valid <= 1'd0;
	builder_axilite2wishbone_next_state <= builder_axilite2wishbone_state;
	case (builder_axilite2wishbone_state)
		1'd1: begin
			main_wb_bus_stb <= 1'd1;
			main_wb_bus_cyc <= 1'd1;
			main_wb_bus_adr <= main_r_addr[31:2];
			main_wb_bus_sel <= 4'd15;
			if (main_wb_bus_ack) begin
				main_ar_ready <= 1'd1;
				main_data_next_value1 <= main_wb_bus_dat_r;
				main_data_next_value_ce1 <= 1'd1;
				builder_axilite2wishbone_next_state <= 2'd2;
			end
		end
		2'd2: begin
			main_r_valid <= 1'd1;
			main_r_payload_resp <= 1'd0;
			main_r_payload_data <= main_data;
			if (main_r_ready) begin
				builder_axilite2wishbone_next_state <= 1'd0;
			end
		end
		2'd3: begin
			main_wb_bus_stb <= main_w_valid;
			main_wb_bus_cyc <= main_w_valid;
			main_wb_bus_we <= 1'd1;
			main_wb_bus_adr <= main_w_addr[31:2];
			main_wb_bus_sel <= main_w_payload_strb;
			main_wb_bus_dat_w <= main_w_payload_data;
			if (main_wb_bus_ack) begin
				main_aw_ready <= 1'd1;
				main_w_ready <= 1'd1;
				builder_axilite2wishbone_next_state <= 3'd4;
			end
		end
		3'd4: begin
			main_b_valid <= 1'd1;
			main_b_payload_resp <= 1'd0;
			if (main_b_ready) begin
				builder_axilite2wishbone_next_state <= 1'd0;
			end
		end
		default: begin
			if ((main_ar_valid & main_aw_valid)) begin
				if (main_last_ar_aw_n) begin
					main_last_ar_aw_n_next_value0 <= 1'd0;
					main_last_ar_aw_n_next_value_ce0 <= 1'd1;
					builder_axilite2wishbone_next_state <= 2'd3;
				end else begin
					main_last_ar_aw_n_next_value0 <= 1'd1;
					main_last_ar_aw_n_next_value_ce0 <= 1'd1;
					builder_axilite2wishbone_next_state <= 1'd1;
				end
			end else begin
				if (main_ar_valid) begin
					main_last_ar_aw_n_next_value0 <= 1'd1;
					main_last_ar_aw_n_next_value_ce0 <= 1'd1;
					builder_axilite2wishbone_next_state <= 1'd1;
				end else begin
					if (main_aw_valid) begin
						main_last_ar_aw_n_next_value0 <= 1'd0;
						main_last_ar_aw_n_next_value_ce0 <= 1'd1;
						builder_axilite2wishbone_next_state <= 2'd3;
					end
				end
			end
		end
	endcase
end
assign main_wishbone_adr = main_wb_bus_adr;
assign main_wishbone_dat_w = main_wb_bus_dat_w;
assign main_wb_bus_dat_r = main_wishbone_dat_r;
assign main_wishbone_sel = main_wb_bus_sel;
assign main_wishbone_cyc = main_wb_bus_cyc;
assign main_wishbone_stb = main_wb_bus_stb;
assign main_wb_bus_ack = main_wishbone_ack;
assign main_wishbone_we = main_wb_bus_we;
assign main_wishbone_cti = main_wb_bus_cti;
assign main_wishbone_bte = main_wb_bus_bte;
assign main_wb_bus_err = main_wishbone_err;
assign builder_sel = (builder_bank_bus_adr[13:9] == 1'd0);
assign main_drp_reset_r = builder_bank_bus_dat_w[0];
assign main_drp_reset_re = ((builder_sel & builder_bank_bus_we) & (builder_bank_bus_adr[2:0] == 1'd0));
assign main_drp_reset_we = ((builder_sel & (~builder_bank_bus_we)) & (builder_bank_bus_adr[2:0] == 1'd0));
assign builder_drp_locked_r = builder_bank_bus_dat_w[0];
assign builder_drp_locked_re = ((builder_sel & builder_bank_bus_we) & (builder_bank_bus_adr[2:0] == 1'd1));
assign builder_drp_locked_we = ((builder_sel & (~builder_bank_bus_we)) & (builder_bank_bus_adr[2:0] == 1'd1));
assign main_drp_read_r = builder_bank_bus_dat_w[0];
assign main_drp_read_re = ((builder_sel & builder_bank_bus_we) & (builder_bank_bus_adr[2:0] == 2'd2));
assign main_drp_read_we = ((builder_sel & (~builder_bank_bus_we)) & (builder_bank_bus_adr[2:0] == 2'd2));
assign main_drp_write_r = builder_bank_bus_dat_w[0];
assign main_drp_write_re = ((builder_sel & builder_bank_bus_we) & (builder_bank_bus_adr[2:0] == 2'd3));
assign main_drp_write_we = ((builder_sel & (~builder_bank_bus_we)) & (builder_bank_bus_adr[2:0] == 2'd3));
assign builder_drp_drdy_r = builder_bank_bus_dat_w[0];
assign builder_drp_drdy_re = ((builder_sel & builder_bank_bus_we) & (builder_bank_bus_adr[2:0] == 3'd4));
assign builder_drp_drdy_we = ((builder_sel & (~builder_bank_bus_we)) & (builder_bank_bus_adr[2:0] == 3'd4));
assign builder_drp_adr0_r = builder_bank_bus_dat_w[6:0];
assign builder_drp_adr0_re = ((builder_sel & builder_bank_bus_we) & (builder_bank_bus_adr[2:0] == 3'd5));
assign builder_drp_adr0_we = ((builder_sel & (~builder_bank_bus_we)) & (builder_bank_bus_adr[2:0] == 3'd5));
assign builder_drp_dat_w0_r = builder_bank_bus_dat_w[15:0];
assign builder_drp_dat_w0_re = ((builder_sel & builder_bank_bus_we) & (builder_bank_bus_adr[2:0] == 3'd6));
assign builder_drp_dat_w0_we = ((builder_sel & (~builder_bank_bus_we)) & (builder_bank_bus_adr[2:0] == 3'd6));
assign builder_drp_dat_r_r = builder_bank_bus_dat_w[15:0];
assign builder_drp_dat_r_re = ((builder_sel & builder_bank_bus_we) & (builder_bank_bus_adr[2:0] == 3'd7));
assign builder_drp_dat_r_we = ((builder_sel & (~builder_bank_bus_we)) & (builder_bank_bus_adr[2:0] == 3'd7));
assign builder_drp_locked_w = main_drp_locked_status;
assign main_drp_locked_we = builder_drp_locked_we;
assign builder_drp_drdy_w = main_drp_drdy_status;
assign main_drp_drdy_we = builder_drp_drdy_we;
assign builder_drp_adr0_w = main_drp_adr_storage[6:0];
assign builder_drp_dat_w0_w = main_drp_dat_w_storage[15:0];
assign builder_drp_dat_r_w = main_drp_dat_r_status[15:0];
assign main_drp_dat_r_we = builder_drp_dat_r_we;
assign builder_adr = main_adr;
assign builder_we = main_we;
assign builder_dat_w = main_dat_w;
assign main_dat_r = builder_dat_r;
assign builder_bank_bus_adr = builder_adr;
assign builder_bank_bus_we = builder_we;
assign builder_bank_bus_dat_w = builder_dat_w;
assign builder_dat_r = builder_bank_bus_dat_r;

always @(posedge por_clk) begin
	main_int_rst <= sys_rst;
end

always @(posedge sys_clk_1) begin
	builder_wishbone2csr_state <= builder_wishbone2csr_next_state;
	main_den_pipe <= (main_drp_read_re | main_drp_write_re);
	main_dwe_pipe <= main_drp_write_re;
	if ((main_drp_read_re | main_drp_write_re)) begin
		main_drp_drdy_status <= 1'd0;
	end else begin
		if (main_drp_drdy) begin
			main_drp_drdy_status <= 1'd1;
		end
	end
	builder_axilite2wishbone_state <= builder_axilite2wishbone_next_state;
	if (main_last_ar_aw_n_next_value_ce0) begin
		main_last_ar_aw_n <= main_last_ar_aw_n_next_value0;
	end
	if (main_data_next_value_ce1) begin
		main_data <= main_data_next_value1;
	end
	builder_bank_bus_dat_r <= 1'd0;
	if (builder_sel) begin
		case (builder_bank_bus_adr[2:0])
			1'd0: begin
				builder_bank_bus_dat_r <= main_drp_reset_w;
			end
			1'd1: begin
				builder_bank_bus_dat_r <= builder_drp_locked_w;
			end
			2'd2: begin
				builder_bank_bus_dat_r <= main_drp_read_w;
			end
			2'd3: begin
				builder_bank_bus_dat_r <= main_drp_write_w;
			end
			3'd4: begin
				builder_bank_bus_dat_r <= builder_drp_drdy_w;
			end
			3'd5: begin
				builder_bank_bus_dat_r <= builder_drp_adr0_w;
			end
			3'd6: begin
				builder_bank_bus_dat_r <= builder_drp_dat_w0_w;
			end
			3'd7: begin
				builder_bank_bus_dat_r <= builder_drp_dat_r_w;
			end
		endcase
	end
	if (builder_drp_adr0_re) begin
		main_drp_adr_storage[6:0] <= builder_drp_adr0_r;
	end
	main_drp_adr_re <= builder_drp_adr0_re;
	if (builder_drp_dat_w0_re) begin
		main_drp_dat_w_storage[15:0] <= builder_drp_dat_w0_r;
	end
	main_drp_dat_w_re <= builder_drp_dat_w0_re;
	if (sys_rst_1) begin
		main_drp_drdy_status <= 1'd0;
		main_drp_adr_re <= 1'd0;
		main_drp_dat_w_re <= 1'd0;
		main_den_pipe <= 1'd0;
		main_dwe_pipe <= 1'd0;
		main_data <= 32'd0;
		main_last_ar_aw_n <= 1'd0;
		builder_wishbone2csr_state <= 1'd0;
		builder_axilite2wishbone_state <= 3'd0;
	end
end

BUFG BUFG(
	.I(main_clkout0),
	.O(main_clkout_buf0)
);

BUFG BUFG_1(
	.I(main_clkout1),
	.O(main_clkout_buf1)
);

MMCME2_ADV #(
	.BANDWIDTH("OPTIMIZED"),
	.CLKFBOUT_MULT_F(6'd37),
	.CLKIN1_PERIOD(10.0),
	.CLKOUT0_DIVIDE_F(3'd5),
	.CLKOUT0_PHASE(1'd0),
	.CLKOUT1_DIVIDE(1'd1),
	.CLKOUT1_PHASE(1'd0),
	.DIVCLK_DIVIDE(3'd5),
	.REF_JITTER1(0.01)
) MMCME2_ADV (
	.CLKFBIN(builder_mmcm_fb),
	.CLKIN1(main_clkin),
	.DADDR(main_drp_adr_storage),
	.DCLK(sys_clk_1),
	.DEN(main_den_pipe),
	.DI(main_drp_dat_w_storage),
	.DWE(main_dwe_pipe),
	.RST(main_reset),
	.CLKFBOUT(builder_mmcm_fb),
	.CLKOUT0(main_clkout0),
	.CLKOUT1(main_clkout1),
	.DO(main_drp_dat_r_status),
	.DRDY(main_drp_drdy),
	.LOCKED(main_locked)
);

endmodule
